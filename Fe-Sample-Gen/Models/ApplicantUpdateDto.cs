/*
 * 81_1.CNTS_PTZP-ErmTask-s-rest-v2
 *
 * ERM API provider
 *
 * OpenAPI spec version: 3.0.0
 * Contact: kakolesov@vtb.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Параметры согласующего лица
    /// </summary>
    [DataContract]
    public partial class ApplicantUpdateDto : IEquatable<ApplicantUpdateDto>
    { 
        /// <summary>
        /// Наименование запрашивающего органа
        /// </summary>
        /// <value>Наименование запрашивающего органа</value>

        [MaxLength(1024)]
        [DataMember(Name="applicantName")]
        public string ApplicantName { get; set; }

        /// <summary>
        /// Тип запрашивающего органа (ФОИВ)
        /// </summary>
        /// <value>Тип запрашивающего органа (ФОИВ)</value>

        [MaxLength(255)]
        [DataMember(Name="applicantType")]
        public string ApplicantType { get; set; }

        /// <summary>
        /// Регион
        /// </summary>
        /// <value>Регион</value>

        [MaxLength(255)]
        [DataMember(Name="applicantRegion")]
        public string ApplicantRegion { get; set; }

        /// <summary>
        /// Код подразделения
        /// </summary>
        /// <value>Код подразделения</value>

        [MaxLength(255)]
        [DataMember(Name="applicantCode")]
        public string ApplicantCode { get; set; }

        /// <summary>
        /// Адрес
        /// </summary>
        /// <value>Адрес</value>

        [MaxLength(255)]
        [DataMember(Name="applicantAddress")]
        public string ApplicantAddress { get; set; }

        /// <summary>
        /// Список номеров телефона
        /// </summary>
        /// <value>Список номеров телефона</value>

        [DataMember(Name="applicantPhones")]
        public List<string> ApplicantPhones { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicantUpdateDto {\n");
            sb.Append("  ApplicantName: ").Append(ApplicantName).Append("\n");
            sb.Append("  ApplicantType: ").Append(ApplicantType).Append("\n");
            sb.Append("  ApplicantRegion: ").Append(ApplicantRegion).Append("\n");
            sb.Append("  ApplicantCode: ").Append(ApplicantCode).Append("\n");
            sb.Append("  ApplicantAddress: ").Append(ApplicantAddress).Append("\n");
            sb.Append("  ApplicantPhones: ").Append(ApplicantPhones).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ApplicantUpdateDto)obj);
        }

        /// <summary>
        /// Returns true if ApplicantUpdateDto instances are equal
        /// </summary>
        /// <param name="other">Instance of ApplicantUpdateDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicantUpdateDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ApplicantName == other.ApplicantName ||
                    ApplicantName != null &&
                    ApplicantName.Equals(other.ApplicantName)
                ) && 
                (
                    ApplicantType == other.ApplicantType ||
                    ApplicantType != null &&
                    ApplicantType.Equals(other.ApplicantType)
                ) && 
                (
                    ApplicantRegion == other.ApplicantRegion ||
                    ApplicantRegion != null &&
                    ApplicantRegion.Equals(other.ApplicantRegion)
                ) && 
                (
                    ApplicantCode == other.ApplicantCode ||
                    ApplicantCode != null &&
                    ApplicantCode.Equals(other.ApplicantCode)
                ) && 
                (
                    ApplicantAddress == other.ApplicantAddress ||
                    ApplicantAddress != null &&
                    ApplicantAddress.Equals(other.ApplicantAddress)
                ) && 
                (
                    ApplicantPhones == other.ApplicantPhones ||
                    ApplicantPhones != null &&
                    ApplicantPhones.SequenceEqual(other.ApplicantPhones)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ApplicantName != null)
                    hashCode = hashCode * 59 + ApplicantName.GetHashCode();
                    if (ApplicantType != null)
                    hashCode = hashCode * 59 + ApplicantType.GetHashCode();
                    if (ApplicantRegion != null)
                    hashCode = hashCode * 59 + ApplicantRegion.GetHashCode();
                    if (ApplicantCode != null)
                    hashCode = hashCode * 59 + ApplicantCode.GetHashCode();
                    if (ApplicantAddress != null)
                    hashCode = hashCode * 59 + ApplicantAddress.GetHashCode();
                    if (ApplicantPhones != null)
                    hashCode = hashCode * 59 + ApplicantPhones.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ApplicantUpdateDto left, ApplicantUpdateDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ApplicantUpdateDto left, ApplicantUpdateDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
