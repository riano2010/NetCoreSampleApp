/*
 * 81_1.CNTS_PTZP-ErmTask-s-rest-v2
 *
 * ERM API provider
 *
 * OpenAPI spec version: 3.0.0
 * Contact: kakolesov@vtb.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Цель запроса
    /// </summary>
    [DataContract]
    public partial class TargetResponseEditDto : IEquatable<TargetResponseEditDto>
    { 
        /// <summary>
        /// Идентификатор объекта запроса
        /// </summary>
        /// <value>Идентификатор объекта запроса</value>
        [RegularExpression("/\\b[0-9a-f]{8}\\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\\b[0-9a-f]{12}\\b/")]
        [MaxLength(36)]
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets TargetType
        /// </summary>

        [DataMember(Name="targetType")]
        public DictionaryItem TargetType { get; set; }

        /// <summary>
        /// ИНН
        /// </summary>
        /// <value>ИНН</value>

        [MaxLength(255)]
        [DataMember(Name="inn")]
        public string Inn { get; set; }

        /// <summary>
        /// ОГРН
        /// </summary>
        /// <value>ОГРН</value>

        [MaxLength(255)]
        [DataMember(Name="ogrn")]
        public string Ogrn { get; set; }

        /// <summary>
        /// КПП
        /// </summary>
        /// <value>КПП</value>

        [MaxLength(255)]
        [DataMember(Name="kpp")]
        public string Kpp { get; set; }

        /// <summary>
        /// Фамилия
        /// </summary>
        /// <value>Фамилия</value>

        [MaxLength(255)]
        [DataMember(Name="surname")]
        public string Surname { get; set; }

        /// <summary>
        /// Имя
        /// </summary>
        /// <value>Имя</value>

        [MaxLength(255)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Отчество
        /// </summary>
        /// <value>Отчество</value>

        [MaxLength(255)]
        [DataMember(Name="patronymic")]
        public string Patronymic { get; set; }

        /// <summary>
        /// Адрес регистрации
        /// </summary>
        /// <value>Адрес регистрации</value>

        [MaxLength(255)]
        [DataMember(Name="regAddress")]
        public string RegAddress { get; set; }

        /// <summary>
        /// Адрес регистрации
        /// </summary>
        /// <value>Адрес регистрации</value>

        [MaxLength(255)]
        [DataMember(Name="factAddress")]
        public string FactAddress { get; set; }

        /// <summary>
        /// Дата рождения
        /// </summary>
        /// <value>Дата рождения</value>

        [DataMember(Name="birthDate")]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// Место рождения
        /// </summary>
        /// <value>Место рождения</value>

        [MaxLength(1024)]
        [DataMember(Name="birthPlace")]
        public string BirthPlace { get; set; }

        /// <summary>
        /// Дата смерти
        /// </summary>
        /// <value>Дата смерти</value>

        [DataMember(Name="deathDate")]
        public DateTime? DeathDate { get; set; }

        /// <summary>
        /// Список телефонов
        /// </summary>
        /// <value>Список телефонов</value>

        [DataMember(Name="phones")]
        public List<string> Phones { get; set; }

        /// <summary>
        /// Значение для объекта запроса
        /// </summary>
        /// <value>Значение для объекта запроса</value>

        [MaxLength(255)]
        [DataMember(Name="value")]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>

        [DataMember(Name="position")]
        public DictionaryItem Position { get; set; }

        /// <summary>
        /// Gets or Sets IdentityDocument
        /// </summary>

        [DataMember(Name="identityDocument")]
        public IdentityDocumentCollectionDto IdentityDocument { get; set; }

        /// <summary>
        /// Gets or Sets _Client
        /// </summary>

        [DataMember(Name="client")]
        public DrpClientDataDto _Client { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>

        [DataMember(Name="product")]
        public ProductResponseEditDto Product { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TargetResponseEditDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TargetType: ").Append(TargetType).Append("\n");
            sb.Append("  Inn: ").Append(Inn).Append("\n");
            sb.Append("  Ogrn: ").Append(Ogrn).Append("\n");
            sb.Append("  Kpp: ").Append(Kpp).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Patronymic: ").Append(Patronymic).Append("\n");
            sb.Append("  RegAddress: ").Append(RegAddress).Append("\n");
            sb.Append("  FactAddress: ").Append(FactAddress).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  BirthPlace: ").Append(BirthPlace).Append("\n");
            sb.Append("  DeathDate: ").Append(DeathDate).Append("\n");
            sb.Append("  Phones: ").Append(Phones).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  IdentityDocument: ").Append(IdentityDocument).Append("\n");
            sb.Append("  _Client: ").Append(_Client).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TargetResponseEditDto)obj);
        }

        /// <summary>
        /// Returns true if TargetResponseEditDto instances are equal
        /// </summary>
        /// <param name="other">Instance of TargetResponseEditDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TargetResponseEditDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    TargetType == other.TargetType ||
                    TargetType != null &&
                    TargetType.Equals(other.TargetType)
                ) && 
                (
                    Inn == other.Inn ||
                    Inn != null &&
                    Inn.Equals(other.Inn)
                ) && 
                (
                    Ogrn == other.Ogrn ||
                    Ogrn != null &&
                    Ogrn.Equals(other.Ogrn)
                ) && 
                (
                    Kpp == other.Kpp ||
                    Kpp != null &&
                    Kpp.Equals(other.Kpp)
                ) && 
                (
                    Surname == other.Surname ||
                    Surname != null &&
                    Surname.Equals(other.Surname)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Patronymic == other.Patronymic ||
                    Patronymic != null &&
                    Patronymic.Equals(other.Patronymic)
                ) && 
                (
                    RegAddress == other.RegAddress ||
                    RegAddress != null &&
                    RegAddress.Equals(other.RegAddress)
                ) && 
                (
                    FactAddress == other.FactAddress ||
                    FactAddress != null &&
                    FactAddress.Equals(other.FactAddress)
                ) && 
                (
                    BirthDate == other.BirthDate ||
                    BirthDate != null &&
                    BirthDate.Equals(other.BirthDate)
                ) && 
                (
                    BirthPlace == other.BirthPlace ||
                    BirthPlace != null &&
                    BirthPlace.Equals(other.BirthPlace)
                ) && 
                (
                    DeathDate == other.DeathDate ||
                    DeathDate != null &&
                    DeathDate.Equals(other.DeathDate)
                ) && 
                (
                    Phones == other.Phones ||
                    Phones != null &&
                    Phones.SequenceEqual(other.Phones)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                ) && 
                (
                    Position == other.Position ||
                    Position != null &&
                    Position.Equals(other.Position)
                ) && 
                (
                    IdentityDocument == other.IdentityDocument ||
                    IdentityDocument != null &&
                    IdentityDocument.Equals(other.IdentityDocument)
                ) && 
                (
                    _Client == other._Client ||
                    _Client != null &&
                    _Client.Equals(other._Client)
                ) && 
                (
                    Product == other.Product ||
                    Product != null &&
                    Product.Equals(other.Product)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (TargetType != null)
                    hashCode = hashCode * 59 + TargetType.GetHashCode();
                    if (Inn != null)
                    hashCode = hashCode * 59 + Inn.GetHashCode();
                    if (Ogrn != null)
                    hashCode = hashCode * 59 + Ogrn.GetHashCode();
                    if (Kpp != null)
                    hashCode = hashCode * 59 + Kpp.GetHashCode();
                    if (Surname != null)
                    hashCode = hashCode * 59 + Surname.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Patronymic != null)
                    hashCode = hashCode * 59 + Patronymic.GetHashCode();
                    if (RegAddress != null)
                    hashCode = hashCode * 59 + RegAddress.GetHashCode();
                    if (FactAddress != null)
                    hashCode = hashCode * 59 + FactAddress.GetHashCode();
                    if (BirthDate != null)
                    hashCode = hashCode * 59 + BirthDate.GetHashCode();
                    if (BirthPlace != null)
                    hashCode = hashCode * 59 + BirthPlace.GetHashCode();
                    if (DeathDate != null)
                    hashCode = hashCode * 59 + DeathDate.GetHashCode();
                    if (Phones != null)
                    hashCode = hashCode * 59 + Phones.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                    if (Position != null)
                    hashCode = hashCode * 59 + Position.GetHashCode();
                    if (IdentityDocument != null)
                    hashCode = hashCode * 59 + IdentityDocument.GetHashCode();
                    if (_Client != null)
                    hashCode = hashCode * 59 + _Client.GetHashCode();
                    if (Product != null)
                    hashCode = hashCode * 59 + Product.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TargetResponseEditDto left, TargetResponseEditDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TargetResponseEditDto left, TargetResponseEditDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
