/*
 * 81_1.CNTS_PTZP-ErmTask-s-rest-v2
 *
 * ERM API provider
 *
 * OpenAPI spec version: 3.0.0
 * Contact: kakolesov@vtb.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Данные заголовка
    /// </summary>
    [DataContract]
    public partial class HeaderUpdateDto : IEquatable<HeaderUpdateDto>
    { 
        /// <summary>
        /// Номер документа
        /// </summary>
        /// <value>Номер документа</value>

        [MaxLength(255)]
        [DataMember(Name="regNumber")]
        public string RegNumber { get; set; }

        /// <summary>
        /// Дата регистрации документа
        /// </summary>
        /// <value>Дата регистрации документа</value>

        [DataMember(Name="regDate")]
        public DateTime? RegDate { get; set; }

        /// <summary>
        /// Подсказка
        /// </summary>
        /// <value>Подсказка</value>

        [MaxLength(1024)]
        [DataMember(Name="hint")]
        public string Hint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HeaderUpdateDto {\n");
            sb.Append("  RegNumber: ").Append(RegNumber).Append("\n");
            sb.Append("  RegDate: ").Append(RegDate).Append("\n");
            sb.Append("  Hint: ").Append(Hint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HeaderUpdateDto)obj);
        }

        /// <summary>
        /// Returns true if HeaderUpdateDto instances are equal
        /// </summary>
        /// <param name="other">Instance of HeaderUpdateDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HeaderUpdateDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RegNumber == other.RegNumber ||
                    RegNumber != null &&
                    RegNumber.Equals(other.RegNumber)
                ) && 
                (
                    RegDate == other.RegDate ||
                    RegDate != null &&
                    RegDate.Equals(other.RegDate)
                ) && 
                (
                    Hint == other.Hint ||
                    Hint != null &&
                    Hint.Equals(other.Hint)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RegNumber != null)
                    hashCode = hashCode * 59 + RegNumber.GetHashCode();
                    if (RegDate != null)
                    hashCode = hashCode * 59 + RegDate.GetHashCode();
                    if (Hint != null)
                    hashCode = hashCode * 59 + Hint.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HeaderUpdateDto left, HeaderUpdateDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HeaderUpdateDto left, HeaderUpdateDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
