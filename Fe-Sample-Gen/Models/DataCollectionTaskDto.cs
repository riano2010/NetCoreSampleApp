/*
 * 81_1.CNTS_PTZP-ErmTask-s-rest-v2
 *
 * ERM API provider
 *
 * OpenAPI spec version: 3.0.0
 * Contact: kakolesov@vtb.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Задача сбора данных
    /// </summary>
    [DataContract]
    public partial class DataCollectionTaskDto : IEquatable<DataCollectionTaskDto>
    { 
        /// <summary>
        /// Регистрационный номер запроса, присвоенный в СДО
        /// </summary>
        /// <value>Регистрационный номер запроса, присвоенный в СДО</value>

        [MaxLength(255)]
        [DataMember(Name="regNumber")]
        public string RegNumber { get; set; }

        /// <summary>
        /// Дата подачи запроса ФОИВ
        /// </summary>
        /// <value>Дата подачи запроса ФОИВ</value>

        [DataMember(Name="regDate")]
        public DateTime? RegDate { get; set; }

        /// <summary>
        /// Подсказка
        /// </summary>
        /// <value>Подсказка</value>

        [MaxLength(1024)]
        [DataMember(Name="hint")]
        public string Hint { get; set; }

        /// <summary>
        /// Цели запроса
        /// </summary>
        /// <value>Цели запроса</value>

        [DataMember(Name="targets")]
        public List<TargetCollectionDto> Targets { get; set; }

        /// <summary>
        /// Срок выполнения запроса
        /// </summary>
        /// <value>Срок выполнения запроса</value>

        [DataMember(Name="dueDate")]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Комментарий к запросу
        /// </summary>
        /// <value>Комментарий к запросу</value>

        [MaxLength(4096)]
        [DataMember(Name="comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Причины отказа
        /// </summary>
        /// <value>Причины отказа</value>

        [DataMember(Name="rejectionReasons")]
        public List<DictionaryItem> RejectionReasons { get; set; }

        /// <summary>
        /// Gets or Sets CoverLetter
        /// </summary>

        [DataMember(Name="coverLetter")]
        public AnnexDto CoverLetter { get; set; }

        /// <summary>
        /// Gets or Sets SharedDirectory
        /// </summary>

        [DataMember(Name="sharedDirectory")]
        public SharedDirectory SharedDirectory { get; set; }

        /// <summary>
        /// Флаг показа элемента UI с данными о файловой шаре
        /// </summary>
        /// <value>Флаг показа элемента UI с данными о файловой шаре</value>

        [DataMember(Name="showSharedDirectoryTab")]
        public bool? ShowSharedDirectoryTab { get; set; }

        /// <summary>
        /// Флаг показа кнопки загрузки исходного файла запроса
        /// </summary>
        /// <value>Флаг показа кнопки загрузки исходного файла запроса</value>

        [DataMember(Name="showOriginalRequestButton")]
        public bool? ShowOriginalRequestButton { get; set; }

        /// <summary>
        /// Количество листов прикрепленных файлов и сопроводительного письма
        /// </summary>
        /// <value>Количество листов прикрепленных файлов и сопроводительного письма</value>

        [Range(0, 2147483647)]
        [DataMember(Name="pageCount")]
        public int? PageCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataCollectionTaskDto {\n");
            sb.Append("  RegNumber: ").Append(RegNumber).Append("\n");
            sb.Append("  RegDate: ").Append(RegDate).Append("\n");
            sb.Append("  Hint: ").Append(Hint).Append("\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  RejectionReasons: ").Append(RejectionReasons).Append("\n");
            sb.Append("  CoverLetter: ").Append(CoverLetter).Append("\n");
            sb.Append("  SharedDirectory: ").Append(SharedDirectory).Append("\n");
            sb.Append("  ShowSharedDirectoryTab: ").Append(ShowSharedDirectoryTab).Append("\n");
            sb.Append("  ShowOriginalRequestButton: ").Append(ShowOriginalRequestButton).Append("\n");
            sb.Append("  PageCount: ").Append(PageCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DataCollectionTaskDto)obj);
        }

        /// <summary>
        /// Returns true if DataCollectionTaskDto instances are equal
        /// </summary>
        /// <param name="other">Instance of DataCollectionTaskDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataCollectionTaskDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RegNumber == other.RegNumber ||
                    RegNumber != null &&
                    RegNumber.Equals(other.RegNumber)
                ) && 
                (
                    RegDate == other.RegDate ||
                    RegDate != null &&
                    RegDate.Equals(other.RegDate)
                ) && 
                (
                    Hint == other.Hint ||
                    Hint != null &&
                    Hint.Equals(other.Hint)
                ) && 
                (
                    Targets == other.Targets ||
                    Targets != null &&
                    Targets.SequenceEqual(other.Targets)
                ) && 
                (
                    DueDate == other.DueDate ||
                    DueDate != null &&
                    DueDate.Equals(other.DueDate)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    RejectionReasons == other.RejectionReasons ||
                    RejectionReasons != null &&
                    RejectionReasons.SequenceEqual(other.RejectionReasons)
                ) && 
                (
                    CoverLetter == other.CoverLetter ||
                    CoverLetter != null &&
                    CoverLetter.Equals(other.CoverLetter)
                ) && 
                (
                    SharedDirectory == other.SharedDirectory ||
                    SharedDirectory != null &&
                    SharedDirectory.Equals(other.SharedDirectory)
                ) && 
                (
                    ShowSharedDirectoryTab == other.ShowSharedDirectoryTab ||
                    ShowSharedDirectoryTab != null &&
                    ShowSharedDirectoryTab.Equals(other.ShowSharedDirectoryTab)
                ) && 
                (
                    ShowOriginalRequestButton == other.ShowOriginalRequestButton ||
                    ShowOriginalRequestButton != null &&
                    ShowOriginalRequestButton.Equals(other.ShowOriginalRequestButton)
                ) && 
                (
                    PageCount == other.PageCount ||
                    PageCount != null &&
                    PageCount.Equals(other.PageCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RegNumber != null)
                    hashCode = hashCode * 59 + RegNumber.GetHashCode();
                    if (RegDate != null)
                    hashCode = hashCode * 59 + RegDate.GetHashCode();
                    if (Hint != null)
                    hashCode = hashCode * 59 + Hint.GetHashCode();
                    if (Targets != null)
                    hashCode = hashCode * 59 + Targets.GetHashCode();
                    if (DueDate != null)
                    hashCode = hashCode * 59 + DueDate.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (RejectionReasons != null)
                    hashCode = hashCode * 59 + RejectionReasons.GetHashCode();
                    if (CoverLetter != null)
                    hashCode = hashCode * 59 + CoverLetter.GetHashCode();
                    if (SharedDirectory != null)
                    hashCode = hashCode * 59 + SharedDirectory.GetHashCode();
                    if (ShowSharedDirectoryTab != null)
                    hashCode = hashCode * 59 + ShowSharedDirectoryTab.GetHashCode();
                    if (ShowOriginalRequestButton != null)
                    hashCode = hashCode * 59 + ShowOriginalRequestButton.GetHashCode();
                    if (PageCount != null)
                    hashCode = hashCode * 59 + PageCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DataCollectionTaskDto left, DataCollectionTaskDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DataCollectionTaskDto left, DataCollectionTaskDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
