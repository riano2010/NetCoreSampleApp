/*
 * 81_1.CNTS_PTZP-ErmTask-s-rest-v2
 *
 * ERM API provider
 *
 * OpenAPI spec version: 3.0.0
 * Contact: kakolesov@vtb.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Поле элемента формы
    /// </summary>
    [DataContract]
    public partial class FieldPropertyDto : IEquatable<FieldPropertyDto>
    { 
        /// <summary>
        /// Тип поля
        /// </summary>
        /// <value>Тип поля</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum INPUTEnum for INPUT
            /// </summary>
            [EnumMember(Value = "INPUT")]
            INPUTEnum = 0,
            /// <summary>
            /// Enum SELECTEnum for SELECT
            /// </summary>
            [EnumMember(Value = "SELECT")]
            SELECTEnum = 1,
            /// <summary>
            /// Enum DATEEnum for DATE
            /// </summary>
            [EnumMember(Value = "DATE")]
            DATEEnum = 2,
            /// <summary>
            /// Enum DATETIMEEnum for DATETIME
            /// </summary>
            [EnumMember(Value = "DATETIME")]
            DATETIMEEnum = 3,
            /// <summary>
            /// Enum RADIOEnum for RADIO
            /// </summary>
            [EnumMember(Value = "RADIO")]
            RADIOEnum = 4,
            /// <summary>
            /// Enum CHECKBOXEnum for CHECKBOX
            /// </summary>
            [EnumMember(Value = "CHECKBOX")]
            CHECKBOXEnum = 5,
            /// <summary>
            /// Enum LISTEnum for LIST
            /// </summary>
            [EnumMember(Value = "LIST")]
            LISTEnum = 6,
            /// <summary>
            /// Enum ARRAYEnum for ARRAY
            /// </summary>
            [EnumMember(Value = "ARRAY")]
            ARRAYEnum = 7,
            /// <summary>
            /// Enum ERRORMARKEREnum for ERROR_MARKER
            /// </summary>
            [EnumMember(Value = "ERROR_MARKER")]
            ERRORMARKEREnum = 8        }

        /// <summary>
        /// Тип поля
        /// </summary>
        /// <value>Тип поля</value>

        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Код поля
        /// </summary>
        /// <value>Код поля</value>

        [MaxLength(255)]
        [DataMember(Name="code")]
        public string Code { get; set; }

        /// <summary>
        /// Видимое описание поля
        /// </summary>
        /// <value>Видимое описание поля</value>

        [MaxLength(255)]
        [DataMember(Name="label")]
        public string Label { get; set; }

        /// <summary>
        /// Значение поля
        /// </summary>
        /// <value>Значение поля</value>

        [DataMember(Name="value")]
        public Object Value { get; set; }

        /// <summary>
        /// Маска ввода
        /// </summary>
        /// <value>Маска ввода</value>

        [MaxLength(255)]
        [DataMember(Name="mask")]
        public string Mask { get; set; }

        /// <summary>
        /// Код справочника
        /// </summary>
        /// <value>Код справочника</value>

        [MaxLength(255)]
        [DataMember(Name="dictionary")]
        public string Dictionary { get; set; }

        /// <summary>
        /// Плейсхолдер для поля
        /// </summary>
        /// <value>Плейсхолдер для поля</value>

        [MaxLength(255)]
        [DataMember(Name="placeholder")]
        public string Placeholder { get; set; }

        /// <summary>
        /// Gets or Sets Validate
        /// </summary>

        [DataMember(Name="validate")]
        public ValidationInfoDto Validate { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>

        [DataMember(Name="error")]
        public VerificationErrorDto Error { get; set; }

        /// <summary>
        /// Ошибки поля
        /// </summary>
        /// <value>Ошибки поля</value>

        [DataMember(Name="errors")]
        public List<VerificationErrorDto> Errors { get; set; }

        /// <summary>
        /// Порядок отображения атрибутов
        /// </summary>
        /// <value>Порядок отображения атрибутов</value>

        [Range(0, 1000)]
        [DataMember(Name="order")]
        public int? Order { get; set; }

        /// <summary>
        /// Подсказка
        /// </summary>
        /// <value>Подсказка</value>

        [MaxLength(1024)]
        [DataMember(Name="hint")]
        public string Hint { get; set; }

        /// <summary>
        /// Gets or Sets Header
        /// </summary>

        [DataMember(Name="header")]
        public FieldPropertyHeaderDto Header { get; set; }

        /// <summary>
        /// Признак числа
        /// </summary>
        /// <value>Признак числа</value>

        [DataMember(Name="isNumeric")]
        public bool? IsNumeric { get; set; }

        /// <summary>
        /// Требует ли изменение поля выполнения перезапроса данных
        /// </summary>
        /// <value>Требует ли изменение поля выполнения перезапроса данных</value>

        [DataMember(Name="isNeedRequest")]
        public bool? IsNeedRequest { get; set; }

        /// <summary>
        /// Признак что атрибута не может быть изменен
        /// </summary>
        /// <value>Признак что атрибута не может быть изменен</value>

        [DataMember(Name="isEditable")]
        public bool? IsEditable { get; set; }

        /// <summary>
        /// Признак что списочный атрибут не может быть расширен
        /// </summary>
        /// <value>Признак что списочный атрибут не может быть расширен</value>

        [DataMember(Name="isExtensible")]
        public bool? IsExtensible { get; set; }

        /// <summary>
        /// Признак множественного выбора
        /// </summary>
        /// <value>Признак множественного выбора</value>

        [DataMember(Name="isMultiselect")]
        public bool? IsMultiselect { get; set; }

        /// <summary>
        /// Признак что поле отвечает за идентификацию объекта
        /// </summary>
        /// <value>Признак что поле отвечает за идентификацию объекта</value>

        [DataMember(Name="isIdentity")]
        public bool? IsIdentity { get; set; }

        /// <summary>
        /// Признак отображения
        /// </summary>
        /// <value>Признак отображения</value>

        [DataMember(Name="isHidden")]
        public bool? IsHidden { get; set; }

        /// <summary>
        /// Признак панели отказа
        /// </summary>
        /// <value>Признак панели отказа</value>

        [DataMember(Name="isRejectionPanel")]
        public bool? IsRejectionPanel { get; set; }

        /// <summary>
        /// Признак, по которому поле отображается на панель на уровне узла.
        /// </summary>
        /// <value>Признак, по которому поле отображается на панель на уровне узла.</value>

        [DataMember(Name="isPanel")]
        public bool? IsPanel { get; set; }

        /// <summary>
        /// Признак блокировки формы
        /// </summary>
        /// <value>Признак блокировки формы</value>

        [DataMember(Name="isBlocker")]
        public bool? IsBlocker { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldPropertyDto {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Mask: ").Append(Mask).Append("\n");
            sb.Append("  Dictionary: ").Append(Dictionary).Append("\n");
            sb.Append("  Placeholder: ").Append(Placeholder).Append("\n");
            sb.Append("  Validate: ").Append(Validate).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Hint: ").Append(Hint).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  IsNumeric: ").Append(IsNumeric).Append("\n");
            sb.Append("  IsNeedRequest: ").Append(IsNeedRequest).Append("\n");
            sb.Append("  IsEditable: ").Append(IsEditable).Append("\n");
            sb.Append("  IsExtensible: ").Append(IsExtensible).Append("\n");
            sb.Append("  IsMultiselect: ").Append(IsMultiselect).Append("\n");
            sb.Append("  IsIdentity: ").Append(IsIdentity).Append("\n");
            sb.Append("  IsHidden: ").Append(IsHidden).Append("\n");
            sb.Append("  IsRejectionPanel: ").Append(IsRejectionPanel).Append("\n");
            sb.Append("  IsPanel: ").Append(IsPanel).Append("\n");
            sb.Append("  IsBlocker: ").Append(IsBlocker).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FieldPropertyDto)obj);
        }

        /// <summary>
        /// Returns true if FieldPropertyDto instances are equal
        /// </summary>
        /// <param name="other">Instance of FieldPropertyDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldPropertyDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) && 
                (
                    Label == other.Label ||
                    Label != null &&
                    Label.Equals(other.Label)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                ) && 
                (
                    Mask == other.Mask ||
                    Mask != null &&
                    Mask.Equals(other.Mask)
                ) && 
                (
                    Dictionary == other.Dictionary ||
                    Dictionary != null &&
                    Dictionary.Equals(other.Dictionary)
                ) && 
                (
                    Placeholder == other.Placeholder ||
                    Placeholder != null &&
                    Placeholder.Equals(other.Placeholder)
                ) && 
                (
                    Validate == other.Validate ||
                    Validate != null &&
                    Validate.Equals(other.Validate)
                ) && 
                (
                    Error == other.Error ||
                    Error != null &&
                    Error.Equals(other.Error)
                ) && 
                (
                    Errors == other.Errors ||
                    Errors != null &&
                    Errors.SequenceEqual(other.Errors)
                ) && 
                (
                    Order == other.Order ||
                    Order != null &&
                    Order.Equals(other.Order)
                ) && 
                (
                    Hint == other.Hint ||
                    Hint != null &&
                    Hint.Equals(other.Hint)
                ) && 
                (
                    Header == other.Header ||
                    Header != null &&
                    Header.Equals(other.Header)
                ) && 
                (
                    IsNumeric == other.IsNumeric ||
                    IsNumeric != null &&
                    IsNumeric.Equals(other.IsNumeric)
                ) && 
                (
                    IsNeedRequest == other.IsNeedRequest ||
                    IsNeedRequest != null &&
                    IsNeedRequest.Equals(other.IsNeedRequest)
                ) && 
                (
                    IsEditable == other.IsEditable ||
                    IsEditable != null &&
                    IsEditable.Equals(other.IsEditable)
                ) && 
                (
                    IsExtensible == other.IsExtensible ||
                    IsExtensible != null &&
                    IsExtensible.Equals(other.IsExtensible)
                ) && 
                (
                    IsMultiselect == other.IsMultiselect ||
                    IsMultiselect != null &&
                    IsMultiselect.Equals(other.IsMultiselect)
                ) && 
                (
                    IsIdentity == other.IsIdentity ||
                    IsIdentity != null &&
                    IsIdentity.Equals(other.IsIdentity)
                ) && 
                (
                    IsHidden == other.IsHidden ||
                    IsHidden != null &&
                    IsHidden.Equals(other.IsHidden)
                ) && 
                (
                    IsRejectionPanel == other.IsRejectionPanel ||
                    IsRejectionPanel != null &&
                    IsRejectionPanel.Equals(other.IsRejectionPanel)
                ) && 
                (
                    IsPanel == other.IsPanel ||
                    IsPanel != null &&
                    IsPanel.Equals(other.IsPanel)
                ) && 
                (
                    IsBlocker == other.IsBlocker ||
                    IsBlocker != null &&
                    IsBlocker.Equals(other.IsBlocker)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                    if (Mask != null)
                    hashCode = hashCode * 59 + Mask.GetHashCode();
                    if (Dictionary != null)
                    hashCode = hashCode * 59 + Dictionary.GetHashCode();
                    if (Placeholder != null)
                    hashCode = hashCode * 59 + Placeholder.GetHashCode();
                    if (Validate != null)
                    hashCode = hashCode * 59 + Validate.GetHashCode();
                    if (Error != null)
                    hashCode = hashCode * 59 + Error.GetHashCode();
                    if (Errors != null)
                    hashCode = hashCode * 59 + Errors.GetHashCode();
                    if (Order != null)
                    hashCode = hashCode * 59 + Order.GetHashCode();
                    if (Hint != null)
                    hashCode = hashCode * 59 + Hint.GetHashCode();
                    if (Header != null)
                    hashCode = hashCode * 59 + Header.GetHashCode();
                    if (IsNumeric != null)
                    hashCode = hashCode * 59 + IsNumeric.GetHashCode();
                    if (IsNeedRequest != null)
                    hashCode = hashCode * 59 + IsNeedRequest.GetHashCode();
                    if (IsEditable != null)
                    hashCode = hashCode * 59 + IsEditable.GetHashCode();
                    if (IsExtensible != null)
                    hashCode = hashCode * 59 + IsExtensible.GetHashCode();
                    if (IsMultiselect != null)
                    hashCode = hashCode * 59 + IsMultiselect.GetHashCode();
                    if (IsIdentity != null)
                    hashCode = hashCode * 59 + IsIdentity.GetHashCode();
                    if (IsHidden != null)
                    hashCode = hashCode * 59 + IsHidden.GetHashCode();
                    if (IsRejectionPanel != null)
                    hashCode = hashCode * 59 + IsRejectionPanel.GetHashCode();
                    if (IsPanel != null)
                    hashCode = hashCode * 59 + IsPanel.GetHashCode();
                    if (IsBlocker != null)
                    hashCode = hashCode * 59 + IsBlocker.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FieldPropertyDto left, FieldPropertyDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FieldPropertyDto left, FieldPropertyDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
