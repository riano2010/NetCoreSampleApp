/*
 * 81_1.CNTS_PTZP-ErmTask-s-rest-v2
 *
 * ERM API provider
 *
 * OpenAPI spec version: 3.0.0
 * Contact: kakolesov@vtb.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Данные для сохранения
    /// </summary>
    [DataContract]
    public partial class CollectionTaskUpdateRequestDto : IEquatable<CollectionTaskUpdateRequestDto>
    { 
        /// <summary>
        /// Комментарий к запросу
        /// </summary>
        /// <value>Комментарий к запросу</value>

        [MaxLength(4096)]
        [DataMember(Name="taskComment")]
        public string TaskComment { get; set; }

        /// <summary>
        /// Данные атрибутов
        /// </summary>
        /// <value>Данные атрибутов</value>

        [DataMember(Name="attributes")]
        public List<AttributeUpdateDto> Attributes { get; set; }

        /// <summary>
        /// Данные запросов СОИД
        /// </summary>
        /// <value>Данные запросов СОИД</value>

        [DataMember(Name="soidRequests")]
        public List<SoidRequestUpdateDto> SoidRequests { get; set; }

        /// <summary>
        /// Gets or Sets SharedDirectory
        /// </summary>

        [DataMember(Name="sharedDirectory")]
        public SharedDirectory SharedDirectory { get; set; }

        /// <summary>
        /// Gets or Sets CoverLetter
        /// </summary>

        [DataMember(Name="coverLetter")]
        public AnnexDto CoverLetter { get; set; }

        /// <summary>
        /// Количество листов прикрепленных файлов и сопроводительного письма
        /// </summary>
        /// <value>Количество листов прикрепленных файлов и сопроводительного письма</value>

        [Range(0, 2147483647)]
        [DataMember(Name="pageCount")]
        public int? PageCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CollectionTaskUpdateRequestDto {\n");
            sb.Append("  TaskComment: ").Append(TaskComment).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  SoidRequests: ").Append(SoidRequests).Append("\n");
            sb.Append("  SharedDirectory: ").Append(SharedDirectory).Append("\n");
            sb.Append("  CoverLetter: ").Append(CoverLetter).Append("\n");
            sb.Append("  PageCount: ").Append(PageCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CollectionTaskUpdateRequestDto)obj);
        }

        /// <summary>
        /// Returns true if CollectionTaskUpdateRequestDto instances are equal
        /// </summary>
        /// <param name="other">Instance of CollectionTaskUpdateRequestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CollectionTaskUpdateRequestDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TaskComment == other.TaskComment ||
                    TaskComment != null &&
                    TaskComment.Equals(other.TaskComment)
                ) && 
                (
                    Attributes == other.Attributes ||
                    Attributes != null &&
                    Attributes.SequenceEqual(other.Attributes)
                ) && 
                (
                    SoidRequests == other.SoidRequests ||
                    SoidRequests != null &&
                    SoidRequests.SequenceEqual(other.SoidRequests)
                ) && 
                (
                    SharedDirectory == other.SharedDirectory ||
                    SharedDirectory != null &&
                    SharedDirectory.Equals(other.SharedDirectory)
                ) && 
                (
                    CoverLetter == other.CoverLetter ||
                    CoverLetter != null &&
                    CoverLetter.Equals(other.CoverLetter)
                ) && 
                (
                    PageCount == other.PageCount ||
                    PageCount != null &&
                    PageCount.Equals(other.PageCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TaskComment != null)
                    hashCode = hashCode * 59 + TaskComment.GetHashCode();
                    if (Attributes != null)
                    hashCode = hashCode * 59 + Attributes.GetHashCode();
                    if (SoidRequests != null)
                    hashCode = hashCode * 59 + SoidRequests.GetHashCode();
                    if (SharedDirectory != null)
                    hashCode = hashCode * 59 + SharedDirectory.GetHashCode();
                    if (CoverLetter != null)
                    hashCode = hashCode * 59 + CoverLetter.GetHashCode();
                    if (PageCount != null)
                    hashCode = hashCode * 59 + PageCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CollectionTaskUpdateRequestDto left, CollectionTaskUpdateRequestDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CollectionTaskUpdateRequestDto left, CollectionTaskUpdateRequestDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
