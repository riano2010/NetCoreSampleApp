/*
 * 81_1.CNTS_PTZP-ErmTask-s-rest-v2
 *
 * ERM API provider
 *
 * OpenAPI spec version: 3.0.0
 * Contact: kakolesov@vtb.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Данные для сохранения
    /// </summary>
    [DataContract]
    public partial class FnsCollectionTaskUpdateRequestDto : IEquatable<FnsCollectionTaskUpdateRequestDto>
    { 
        /// <summary>
        /// Комментарий к запросу
        /// </summary>
        /// <value>Комментарий к запросу</value>

        [MaxLength(4096)]
        [DataMember(Name="taskComment")]
        public string TaskComment { get; set; }

        /// <summary>
        /// Данные атрибутов
        /// </summary>
        /// <value>Данные атрибутов</value>

        [DataMember(Name="attributes")]
        public List<FnsAttributeUpdateDto> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets CoverLetter
        /// </summary>

        [DataMember(Name="coverLetter")]
        public FnsAnnexDto CoverLetter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FnsCollectionTaskUpdateRequestDto {\n");
            sb.Append("  TaskComment: ").Append(TaskComment).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  CoverLetter: ").Append(CoverLetter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FnsCollectionTaskUpdateRequestDto)obj);
        }

        /// <summary>
        /// Returns true if FnsCollectionTaskUpdateRequestDto instances are equal
        /// </summary>
        /// <param name="other">Instance of FnsCollectionTaskUpdateRequestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FnsCollectionTaskUpdateRequestDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TaskComment == other.TaskComment ||
                    TaskComment != null &&
                    TaskComment.Equals(other.TaskComment)
                ) && 
                (
                    Attributes == other.Attributes ||
                    Attributes != null &&
                    Attributes.SequenceEqual(other.Attributes)
                ) && 
                (
                    CoverLetter == other.CoverLetter ||
                    CoverLetter != null &&
                    CoverLetter.Equals(other.CoverLetter)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TaskComment != null)
                    hashCode = hashCode * 59 + TaskComment.GetHashCode();
                    if (Attributes != null)
                    hashCode = hashCode * 59 + Attributes.GetHashCode();
                    if (CoverLetter != null)
                    hashCode = hashCode * 59 + CoverLetter.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FnsCollectionTaskUpdateRequestDto left, FnsCollectionTaskUpdateRequestDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FnsCollectionTaskUpdateRequestDto left, FnsCollectionTaskUpdateRequestDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
