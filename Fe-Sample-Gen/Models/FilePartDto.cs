/*
 * 81_1.CNTS_PTZP-ErmTask-s-rest-v2
 *
 * ERM API provider
 *
 * OpenAPI spec version: 3.0.0
 * Contact: kakolesov@vtb.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Данные о частях файлов-вложений
    /// </summary>
    [DataContract]
    public partial class FilePartDto : IEquatable<FilePartDto>
    { 
        /// <summary>
        /// Внутренний идентификатор файла
        /// </summary>
        /// <value>Внутренний идентификатор файла</value>

        [MaxLength(255)]
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Количество страниц в файле
        /// </summary>
        /// <value>Количество страниц в файле</value>

        [Range(0, 1024)]
        [DataMember(Name="pageCount")]
        public int? PageCount { get; set; }

        /// <summary>
        /// Наименование файла
        /// </summary>
        /// <value>Наименование файла</value>

        [MaxLength(255)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Текущий статус файла
        /// </summary>
        /// <value>Текущий статус файла</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum FileStatusEnum
        {
            /// <summary>
            /// Enum ACTUALEnum for ACTUAL
            /// </summary>
            [EnumMember(Value = "ACTUAL")]
            ACTUALEnum = 0,
            /// <summary>
            /// Enum DELETEDEnum for DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETEDEnum = 1,
            /// <summary>
            /// Enum UPLOADEDEnum for UPLOADED
            /// </summary>
            [EnumMember(Value = "UPLOADED")]
            UPLOADEDEnum = 2        }

        /// <summary>
        /// Текущий статус файла
        /// </summary>
        /// <value>Текущий статус файла</value>

        [DataMember(Name="fileStatus")]
        public FileStatusEnum? FileStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FilePartDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PageCount: ").Append(PageCount).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FileStatus: ").Append(FileStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FilePartDto)obj);
        }

        /// <summary>
        /// Returns true if FilePartDto instances are equal
        /// </summary>
        /// <param name="other">Instance of FilePartDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilePartDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    PageCount == other.PageCount ||
                    PageCount != null &&
                    PageCount.Equals(other.PageCount)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    FileStatus == other.FileStatus ||
                    FileStatus != null &&
                    FileStatus.Equals(other.FileStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (PageCount != null)
                    hashCode = hashCode * 59 + PageCount.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (FileStatus != null)
                    hashCode = hashCode * 59 + FileStatus.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FilePartDto left, FilePartDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FilePartDto left, FilePartDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
