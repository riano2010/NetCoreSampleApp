/*
 * 81_1.CNTS_PTZP-ErmTask-s-rest-v2
 *
 * ERM API provider
 *
 * OpenAPI spec version: 3.0.0
 * Contact: kakolesov@vtb.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Дополнительная информация
    /// </summary>
    [DataContract]
    public partial class ClientAdditionalInfoDto : IEquatable<ClientAdditionalInfoDto>
    { 
        /// <summary>
        /// Адрес регистрации
        /// </summary>
        /// <value>Адрес регистрации</value>

        [MaxLength(255)]
        [DataMember(Name="regAddress")]
        public string RegAddress { get; set; }

        /// <summary>
        /// Адрес регистрации
        /// </summary>
        /// <value>Адрес регистрации</value>

        [MaxLength(255)]
        [DataMember(Name="factAddress")]
        public string FactAddress { get; set; }

        /// <summary>
        /// Список телефонов
        /// </summary>
        /// <value>Список телефонов</value>

        [DataMember(Name="phones")]
        public List<string> Phones { get; set; }

        /// <summary>
        /// Список адресов электронной почты
        /// </summary>
        /// <value>Список адресов электронной почты</value>

        [DataMember(Name="emails")]
        public List<string> Emails { get; set; }

        /// <summary>
        /// Список документов удостоверяющий личность
        /// </summary>
        /// <value>Список документов удостоверяющий личность</value>

        [DataMember(Name="identityDocuments")]
        public List<IdentityDocumentDrpDto> IdentityDocuments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClientAdditionalInfoDto {\n");
            sb.Append("  RegAddress: ").Append(RegAddress).Append("\n");
            sb.Append("  FactAddress: ").Append(FactAddress).Append("\n");
            sb.Append("  Phones: ").Append(Phones).Append("\n");
            sb.Append("  Emails: ").Append(Emails).Append("\n");
            sb.Append("  IdentityDocuments: ").Append(IdentityDocuments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ClientAdditionalInfoDto)obj);
        }

        /// <summary>
        /// Returns true if ClientAdditionalInfoDto instances are equal
        /// </summary>
        /// <param name="other">Instance of ClientAdditionalInfoDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientAdditionalInfoDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RegAddress == other.RegAddress ||
                    RegAddress != null &&
                    RegAddress.Equals(other.RegAddress)
                ) && 
                (
                    FactAddress == other.FactAddress ||
                    FactAddress != null &&
                    FactAddress.Equals(other.FactAddress)
                ) && 
                (
                    Phones == other.Phones ||
                    Phones != null &&
                    Phones.SequenceEqual(other.Phones)
                ) && 
                (
                    Emails == other.Emails ||
                    Emails != null &&
                    Emails.SequenceEqual(other.Emails)
                ) && 
                (
                    IdentityDocuments == other.IdentityDocuments ||
                    IdentityDocuments != null &&
                    IdentityDocuments.SequenceEqual(other.IdentityDocuments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RegAddress != null)
                    hashCode = hashCode * 59 + RegAddress.GetHashCode();
                    if (FactAddress != null)
                    hashCode = hashCode * 59 + FactAddress.GetHashCode();
                    if (Phones != null)
                    hashCode = hashCode * 59 + Phones.GetHashCode();
                    if (Emails != null)
                    hashCode = hashCode * 59 + Emails.GetHashCode();
                    if (IdentityDocuments != null)
                    hashCode = hashCode * 59 + IdentityDocuments.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ClientAdditionalInfoDto left, ClientAdditionalInfoDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ClientAdditionalInfoDto left, ClientAdditionalInfoDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
