/*
 * 81_1.CNTS_PTZP-ErmTask-s-rest-v2
 *
 * ERM API provider
 *
 * OpenAPI spec version: 3.0.0
 * Contact: kakolesov@vtb.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Параметры основания запроса
    /// </summary>
    [DataContract]
    public partial class FoivRequestBasisUpdateDto : IEquatable<FoivRequestBasisUpdateDto>
    { 
        /// <summary>
        /// Тип основания запроса
        /// </summary>
        /// <value>Тип основания запроса</value>

        [MaxLength(255)]
        [DataMember(Name="requestBasisType")]
        public string RequestBasisType { get; set; }

        /// <summary>
        /// Значения оснований запроса
        /// </summary>
        /// <value>Значения оснований запроса</value>

        [DataMember(Name="requestBasisValues")]
        public List<string> RequestBasisValues { get; set; }

        /// <summary>
        /// Должность
        /// </summary>
        /// <value>Должность</value>

        [MaxLength(255)]
        [DataMember(Name="position")]
        public string Position { get; set; }

        /// <summary>
        /// Статьи
        /// </summary>
        /// <value>Статьи</value>

        [DataMember(Name="legalClause")]
        public List<string> LegalClause { get; set; }

        /// <summary>
        /// Дата основания запроса
        /// </summary>
        /// <value>Дата основания запроса</value>

        [DataMember(Name="date")]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Денежная сумма
        /// </summary>
        /// <value>Денежная сумма</value>

        [MaxLength(255)]
        [DataMember(Name="amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Подписант ФИО
        /// </summary>
        /// <value>Подписант ФИО</value>

        [MaxLength(255)]
        [DataMember(Name="signerName")]
        public string SignerName { get; set; }

        /// <summary>
        /// Подписант Должность
        /// </summary>
        /// <value>Подписант Должность</value>

        [MaxLength(255)]
        [DataMember(Name="signerPosition")]
        public string SignerPosition { get; set; }

        /// <summary>
        /// Согласующий ФИО
        /// </summary>
        /// <value>Согласующий ФИО</value>

        [MaxLength(255)]
        [DataMember(Name="approverName")]
        public string ApproverName { get; set; }

        /// <summary>
        /// Согласующий должность
        /// </summary>
        /// <value>Согласующий должность</value>

        [MaxLength(255)]
        [DataMember(Name="approverPosition")]
        public string ApproverPosition { get; set; }

        /// <summary>
        /// Подпись согласующего лица
        /// </summary>
        /// <value>Подпись согласующего лица</value>

        [DataMember(Name="approverSignature")]
        public bool? ApproverSignature { get; set; }

        /// <summary>
        /// Подпись подписанта
        /// </summary>
        /// <value>Подпись подписанта</value>

        [DataMember(Name="signerSignature")]
        public bool? SignerSignature { get; set; }

        /// <summary>
        /// Наличие печати
        /// </summary>
        /// <value>Наличие печати</value>

        [DataMember(Name="hasStamp")]
        public bool? HasStamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FoivRequestBasisUpdateDto {\n");
            sb.Append("  RequestBasisType: ").Append(RequestBasisType).Append("\n");
            sb.Append("  RequestBasisValues: ").Append(RequestBasisValues).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  LegalClause: ").Append(LegalClause).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  SignerName: ").Append(SignerName).Append("\n");
            sb.Append("  SignerPosition: ").Append(SignerPosition).Append("\n");
            sb.Append("  ApproverName: ").Append(ApproverName).Append("\n");
            sb.Append("  ApproverPosition: ").Append(ApproverPosition).Append("\n");
            sb.Append("  ApproverSignature: ").Append(ApproverSignature).Append("\n");
            sb.Append("  SignerSignature: ").Append(SignerSignature).Append("\n");
            sb.Append("  HasStamp: ").Append(HasStamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FoivRequestBasisUpdateDto)obj);
        }

        /// <summary>
        /// Returns true if FoivRequestBasisUpdateDto instances are equal
        /// </summary>
        /// <param name="other">Instance of FoivRequestBasisUpdateDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FoivRequestBasisUpdateDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RequestBasisType == other.RequestBasisType ||
                    RequestBasisType != null &&
                    RequestBasisType.Equals(other.RequestBasisType)
                ) && 
                (
                    RequestBasisValues == other.RequestBasisValues ||
                    RequestBasisValues != null &&
                    RequestBasisValues.SequenceEqual(other.RequestBasisValues)
                ) && 
                (
                    Position == other.Position ||
                    Position != null &&
                    Position.Equals(other.Position)
                ) && 
                (
                    LegalClause == other.LegalClause ||
                    LegalClause != null &&
                    LegalClause.SequenceEqual(other.LegalClause)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    SignerName == other.SignerName ||
                    SignerName != null &&
                    SignerName.Equals(other.SignerName)
                ) && 
                (
                    SignerPosition == other.SignerPosition ||
                    SignerPosition != null &&
                    SignerPosition.Equals(other.SignerPosition)
                ) && 
                (
                    ApproverName == other.ApproverName ||
                    ApproverName != null &&
                    ApproverName.Equals(other.ApproverName)
                ) && 
                (
                    ApproverPosition == other.ApproverPosition ||
                    ApproverPosition != null &&
                    ApproverPosition.Equals(other.ApproverPosition)
                ) && 
                (
                    ApproverSignature == other.ApproverSignature ||
                    ApproverSignature != null &&
                    ApproverSignature.Equals(other.ApproverSignature)
                ) && 
                (
                    SignerSignature == other.SignerSignature ||
                    SignerSignature != null &&
                    SignerSignature.Equals(other.SignerSignature)
                ) && 
                (
                    HasStamp == other.HasStamp ||
                    HasStamp != null &&
                    HasStamp.Equals(other.HasStamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RequestBasisType != null)
                    hashCode = hashCode * 59 + RequestBasisType.GetHashCode();
                    if (RequestBasisValues != null)
                    hashCode = hashCode * 59 + RequestBasisValues.GetHashCode();
                    if (Position != null)
                    hashCode = hashCode * 59 + Position.GetHashCode();
                    if (LegalClause != null)
                    hashCode = hashCode * 59 + LegalClause.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (SignerName != null)
                    hashCode = hashCode * 59 + SignerName.GetHashCode();
                    if (SignerPosition != null)
                    hashCode = hashCode * 59 + SignerPosition.GetHashCode();
                    if (ApproverName != null)
                    hashCode = hashCode * 59 + ApproverName.GetHashCode();
                    if (ApproverPosition != null)
                    hashCode = hashCode * 59 + ApproverPosition.GetHashCode();
                    if (ApproverSignature != null)
                    hashCode = hashCode * 59 + ApproverSignature.GetHashCode();
                    if (SignerSignature != null)
                    hashCode = hashCode * 59 + SignerSignature.GetHashCode();
                    if (HasStamp != null)
                    hashCode = hashCode * 59 + HasStamp.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FoivRequestBasisUpdateDto left, FoivRequestBasisUpdateDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FoivRequestBasisUpdateDto left, FoivRequestBasisUpdateDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
