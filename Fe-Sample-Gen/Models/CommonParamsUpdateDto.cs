/*
 * 81_1.CNTS_PTZP-ErmTask-s-rest-v2
 *
 * ERM API provider
 *
 * OpenAPI spec version: 3.0.0
 * Contact: kakolesov@vtb.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Основные параметры запроса
    /// </summary>
    [DataContract]
    public partial class CommonParamsUpdateDto : IEquatable<CommonParamsUpdateDto>
    { 
        /// <summary>
        /// Номер документа
        /// </summary>
        /// <value>Номер документа</value>

        [MaxLength(255)]
        [DataMember(Name="documentNumber")]
        public string DocumentNumber { get; set; }

        /// <summary>
        /// Тип запроса ФОИВ
        /// </summary>
        /// <value>Тип запроса ФОИВ</value>

        [MaxLength(255)]
        [DataMember(Name="documentType")]
        public string DocumentType { get; set; }

        /// <summary>
        /// Дата запроса ФОИВ
        /// </summary>
        /// <value>Дата запроса ФОИВ</value>

        [DataMember(Name="documentDate")]
        public DateTime? DocumentDate { get; set; }

        /// <summary>
        /// Канал поступления
        /// </summary>
        /// <value>Канал поступления</value>

        [MaxLength(255)]
        [DataMember(Name="regChannel")]
        public string RegChannel { get; set; }

        /// <summary>
        /// Дата принятия решения
        /// </summary>
        /// <value>Дата принятия решения</value>

        [DataMember(Name="dueDate")]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Тип предоставления ответа
        /// </summary>
        /// <value>Тип предоставления ответа</value>

        [MaxLength(255)]
        [DataMember(Name="responseType")]
        public string ResponseType { get; set; }

        /// <summary>
        /// Получатель ответа
        /// </summary>
        /// <value>Получатель ответа</value>

        [MaxLength(255)]
        [DataMember(Name="responseRecipient")]
        public string ResponseRecipient { get; set; }

        /// <summary>
        /// Адрес получатель ответа
        /// </summary>
        /// <value>Адрес получатель ответа</value>

        [MaxLength(255)]
        [DataMember(Name="responseRecipientAddress")]
        public string ResponseRecipientAddress { get; set; }

        /// <summary>
        /// Кому адресован запрос
        /// </summary>
        /// <value>Кому адресован запрос</value>

        [MaxLength(255)]
        [DataMember(Name="requestRecipient")]
        public string RequestRecipient { get; set; }

        /// <summary>
        /// Запрос правомерен
        /// </summary>
        /// <value>Запрос правомерен</value>

        [DataMember(Name="manuallyApproved")]
        public bool? ManuallyApproved { get; set; }

        /// <summary>
        /// Признак повторного запроса
        /// </summary>
        /// <value>Признак повторного запроса</value>

        [DataMember(Name="isRepeated")]
        public bool? IsRepeated { get; set; }

        /// <summary>
        /// Требуется ли ответ в виде таблиц &#x27;excel&#x27;
        /// </summary>
        /// <value>Требуется ли ответ в виде таблиц &#x27;excel&#x27;</value>

        [DataMember(Name="isNeedExcelFormat")]
        public bool? IsNeedExcelFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommonParamsUpdateDto {\n");
            sb.Append("  DocumentNumber: ").Append(DocumentNumber).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  DocumentDate: ").Append(DocumentDate).Append("\n");
            sb.Append("  RegChannel: ").Append(RegChannel).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  ResponseType: ").Append(ResponseType).Append("\n");
            sb.Append("  ResponseRecipient: ").Append(ResponseRecipient).Append("\n");
            sb.Append("  ResponseRecipientAddress: ").Append(ResponseRecipientAddress).Append("\n");
            sb.Append("  RequestRecipient: ").Append(RequestRecipient).Append("\n");
            sb.Append("  ManuallyApproved: ").Append(ManuallyApproved).Append("\n");
            sb.Append("  IsRepeated: ").Append(IsRepeated).Append("\n");
            sb.Append("  IsNeedExcelFormat: ").Append(IsNeedExcelFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CommonParamsUpdateDto)obj);
        }

        /// <summary>
        /// Returns true if CommonParamsUpdateDto instances are equal
        /// </summary>
        /// <param name="other">Instance of CommonParamsUpdateDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonParamsUpdateDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DocumentNumber == other.DocumentNumber ||
                    DocumentNumber != null &&
                    DocumentNumber.Equals(other.DocumentNumber)
                ) && 
                (
                    DocumentType == other.DocumentType ||
                    DocumentType != null &&
                    DocumentType.Equals(other.DocumentType)
                ) && 
                (
                    DocumentDate == other.DocumentDate ||
                    DocumentDate != null &&
                    DocumentDate.Equals(other.DocumentDate)
                ) && 
                (
                    RegChannel == other.RegChannel ||
                    RegChannel != null &&
                    RegChannel.Equals(other.RegChannel)
                ) && 
                (
                    DueDate == other.DueDate ||
                    DueDate != null &&
                    DueDate.Equals(other.DueDate)
                ) && 
                (
                    ResponseType == other.ResponseType ||
                    ResponseType != null &&
                    ResponseType.Equals(other.ResponseType)
                ) && 
                (
                    ResponseRecipient == other.ResponseRecipient ||
                    ResponseRecipient != null &&
                    ResponseRecipient.Equals(other.ResponseRecipient)
                ) && 
                (
                    ResponseRecipientAddress == other.ResponseRecipientAddress ||
                    ResponseRecipientAddress != null &&
                    ResponseRecipientAddress.Equals(other.ResponseRecipientAddress)
                ) && 
                (
                    RequestRecipient == other.RequestRecipient ||
                    RequestRecipient != null &&
                    RequestRecipient.Equals(other.RequestRecipient)
                ) && 
                (
                    ManuallyApproved == other.ManuallyApproved ||
                    ManuallyApproved != null &&
                    ManuallyApproved.Equals(other.ManuallyApproved)
                ) && 
                (
                    IsRepeated == other.IsRepeated ||
                    IsRepeated != null &&
                    IsRepeated.Equals(other.IsRepeated)
                ) && 
                (
                    IsNeedExcelFormat == other.IsNeedExcelFormat ||
                    IsNeedExcelFormat != null &&
                    IsNeedExcelFormat.Equals(other.IsNeedExcelFormat)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DocumentNumber != null)
                    hashCode = hashCode * 59 + DocumentNumber.GetHashCode();
                    if (DocumentType != null)
                    hashCode = hashCode * 59 + DocumentType.GetHashCode();
                    if (DocumentDate != null)
                    hashCode = hashCode * 59 + DocumentDate.GetHashCode();
                    if (RegChannel != null)
                    hashCode = hashCode * 59 + RegChannel.GetHashCode();
                    if (DueDate != null)
                    hashCode = hashCode * 59 + DueDate.GetHashCode();
                    if (ResponseType != null)
                    hashCode = hashCode * 59 + ResponseType.GetHashCode();
                    if (ResponseRecipient != null)
                    hashCode = hashCode * 59 + ResponseRecipient.GetHashCode();
                    if (ResponseRecipientAddress != null)
                    hashCode = hashCode * 59 + ResponseRecipientAddress.GetHashCode();
                    if (RequestRecipient != null)
                    hashCode = hashCode * 59 + RequestRecipient.GetHashCode();
                    if (ManuallyApproved != null)
                    hashCode = hashCode * 59 + ManuallyApproved.GetHashCode();
                    if (IsRepeated != null)
                    hashCode = hashCode * 59 + IsRepeated.GetHashCode();
                    if (IsNeedExcelFormat != null)
                    hashCode = hashCode * 59 + IsNeedExcelFormat.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CommonParamsUpdateDto left, CommonParamsUpdateDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CommonParamsUpdateDto left, CommonParamsUpdateDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
