/*
 * 81_1.CNTS_PTZP-ErmTask-s-rest-v2
 *
 * ERM API provider
 *
 * OpenAPI spec version: 3.0.0
 * Contact: kakolesov@vtb.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Атрибут запрошенный в задаче СОИД
    /// </summary>
    [DataContract]
    public partial class SoidAttributeDto : IEquatable<SoidAttributeDto>
    { 
        /// <summary>
        /// Идентификатор атрибута
        /// </summary>
        /// <value>Идентификатор атрибута</value>
        [RegularExpression("/\\b[0-9a-f]{8}\\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\\b[0-9a-f]{12}\\b/")]
        [MaxLength(36)]
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets AttributeType
        /// </summary>

        [DataMember(Name="attributeType")]
        public DictionaryItem AttributeType { get; set; }

        /// <summary>
        /// Дата начала периода
        /// </summary>
        /// <value>Дата начала периода</value>

        [DataMember(Name="fromDate")]
        public DateTime? FromDate { get; set; }

        /// <summary>
        /// Дата окончания периода
        /// </summary>
        /// <value>Дата окончания периода</value>

        [DataMember(Name="toDate")]
        public DateTime? ToDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SoidAttributeDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AttributeType: ").Append(AttributeType).Append("\n");
            sb.Append("  FromDate: ").Append(FromDate).Append("\n");
            sb.Append("  ToDate: ").Append(ToDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SoidAttributeDto)obj);
        }

        /// <summary>
        /// Returns true if SoidAttributeDto instances are equal
        /// </summary>
        /// <param name="other">Instance of SoidAttributeDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SoidAttributeDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    AttributeType == other.AttributeType ||
                    AttributeType != null &&
                    AttributeType.Equals(other.AttributeType)
                ) && 
                (
                    FromDate == other.FromDate ||
                    FromDate != null &&
                    FromDate.Equals(other.FromDate)
                ) && 
                (
                    ToDate == other.ToDate ||
                    ToDate != null &&
                    ToDate.Equals(other.ToDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (AttributeType != null)
                    hashCode = hashCode * 59 + AttributeType.GetHashCode();
                    if (FromDate != null)
                    hashCode = hashCode * 59 + FromDate.GetHashCode();
                    if (ToDate != null)
                    hashCode = hashCode * 59 + ToDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SoidAttributeDto left, SoidAttributeDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SoidAttributeDto left, SoidAttributeDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
